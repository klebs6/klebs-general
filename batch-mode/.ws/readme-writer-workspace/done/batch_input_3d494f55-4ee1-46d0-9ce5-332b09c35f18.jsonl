{"custom_id":"request-0","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- In terms of the JSON format we would like you to provide, all schema items should live at the top level of the json object. \n  The object itself will be deserialied based on the schema. \n  The fields should not be nested under a parent named 'fields' or anything similar.\n\nHere is the schema to Use:\n\n{\"fields\":{\"crate_name\":{\"generation_instructions\":\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\",\"required\":true,\"type\":\"string\"},\"full_readme_markdown\":{\"generation_instructions\":\"This string should be valid markdown representing the readme for this crate.\\n\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\n\\n Advanced vocabulary and concepts are welcome. \\n\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\",\"required\":true,\"type\":\"string\"},\"package_categories\":{\"generation_instructions\":\"These categories will be used in our Cargo.toml file.\\n\\n It is important that users of this crate can find it on crates.io.\\n\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\n\\n These categories should only be chosen from among the legal crates.io categories. \\n\\n The legal categoreis are:\\n\\n accessibility\\n aerospace\\n algorithms\\n api-bindings\\n asynchronous\\n authentication\\n caching\\n command-line-interface\\n command-line-utilities\\n compilers\\n compression\\n computer-vision\\n concurrency\\n config\\n cryptography\\n data-structures\\n database\\n database-implementations\\n date-and-time\\n development-tools\\n email\\n embedded\\n emulators\\n encoding\\n external-ffi-bindings\\n filesystem\\n finance\\n game-development\\n game-engines\\n games\\n graphics\\n gui\\n hardware-support\\n internationalization\\n localization\\n mathematics\\n memory-management\\n multimedia\\n network-programming\\n no-std\\n os\\n parser-implementations\\n parsing\\n rendering\\n rust-patterns\\n science\\n simulation\\n template-engine\\n text-editors\\n text-processing\\n value-formatting\\n virtualization\\n visualization\\n wasm\\n web-programming\",\"required\":true,\"type\":\"array_of_strings\"},\"package_description\":{\"generation_instructions\":\"We will place this package_description in our Cargo.toml file so the users of this crate\\n know what it does.\\n\\n The discription should be technical, clear, and useful. It should be terse.\",\"required\":true,\"type\":\"string\"},\"package_keywords\":{\"generation_instructions\":\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\",\"required\":true,\"type\":\"array_of_strings\"}},\"struct_docs\":\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\",\"struct_name\":\"AiReadmeWriterDesiredOutput\"}\nRephrase Entries:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind.\n- Do not use modern cultural references or generically reference ideas which do not fit the overall aura of our setting.\n\nPresent the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \nWe would like to be able to parse your response directly as JSON.\n\n","role":"system"},{"content":"We have a rust crate named 'save-load-derive' 0.1.0. \n\nHere is the interface:\n#[proc_macro_derive(SaveLoad)]\npub fn save_load_derive(input: TokenStream) -> TokenStream {\n    trace!(\"Entered save_load_derive procedural macro.\");\n\n    let ast = parse_macro_input!(input as DeriveInput);\n    let ident = &ast.ident;\n\n    debug!(\n        \"Generating `SaveToFile` and `LoadFromFile` impl for `{}` using standard trait bounds.\",\n        ident\n    );\n\n    // We generate code with T: Serialize + for<'de> Deserialize<'de> trait bounds.\n    // If the user hasn't derived or otherwise implemented these, the compiler\n    // will produce a standard error message about missing trait bounds instead.\n    //\n    // We also reference the traits and error type from `save_load_traits` using\n    // fully-qualified paths. Adjust them as necessary for your actual crate setup.\n    let expanded = quote! {\n\n        #[async_trait]\n        impl SaveToFile for #ident\n        where\n            #ident: ::serde::Serialize,\n        {\n            type Error = SaveLoadError;\n\n            async fn save_to_file(\n                &self,\n                filename: impl AsRef<std::path::Path> + Send\n            ) -> Result<(), Self::Error> {\n                tracing::debug!(\n                    \"Attempting to save `{}` to file: {:?}\",\n                    stringify!(#ident),\n                    filename.as_ref()\n                );\n\n                let serialized = serde_json::to_string_pretty(self)?;\n\n                tokio::fs::write(filename.as_ref(), &serialized).await?;\n\n                tracing::info!(\n                    \"Successfully saved `{}` to file: {:?}\",\n                    stringify!(#ident),\n                    filename.as_ref()\n                );\n                Ok(())\n            }\n        }\n\n        #[async_trait]\n        impl LoadFromFile for #ident\n        where\n            #ident: for<'de> ::serde::de::Deserialize<'de>,\n        {\n            type Error = SaveLoadError;\n\n            async fn load_from_file(\n                filename: impl AsRef<std::path::Path> + Send\n            ) -> Result<Self, Self::Error> {\n                tracing::debug!(\n                    \"Attempting to load `{}` from file: {:?}\",\n                    stringify!(#ident),\n                    filename.as_ref()\n                );\n\n                let content = tokio::fs::read_to_string(filename.as_ref()).await?;\n\n                Ok(serde_json::from_str(&content)?)\n            }\n        }\n    };\n\n    trace!(\n        \"Completed macro expansions for `{}`. Returning generated code.\",\n        ident\n    );\n    expanded.into()\n}\n\n\nThis crate has the following authors:\n[\n    \"klebs tpk3.mx@gmail.com\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\nThis crate is held in the following repository:\nhttps://github.com/klebs6/klebs-general\n","role":"user"}],"model":"gpt-4o"}}
{"custom_id":"request-1","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- In terms of the JSON format we would like you to provide, all schema items should live at the top level of the json object. \n  The object itself will be deserialied based on the schema. \n  The fields should not be nested under a parent named 'fields' or anything similar.\n\nHere is the schema to Use:\n\n{\"fields\":{\"crate_name\":{\"generation_instructions\":\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\",\"required\":true,\"type\":\"string\"},\"full_readme_markdown\":{\"generation_instructions\":\"This string should be valid markdown representing the readme for this crate.\\n\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\n\\n Advanced vocabulary and concepts are welcome. \\n\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\",\"required\":true,\"type\":\"string\"},\"package_categories\":{\"generation_instructions\":\"These categories will be used in our Cargo.toml file.\\n\\n It is important that users of this crate can find it on crates.io.\\n\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\n\\n These categories should only be chosen from among the legal crates.io categories. \\n\\n The legal categoreis are:\\n\\n accessibility\\n aerospace\\n algorithms\\n api-bindings\\n asynchronous\\n authentication\\n caching\\n command-line-interface\\n command-line-utilities\\n compilers\\n compression\\n computer-vision\\n concurrency\\n config\\n cryptography\\n data-structures\\n database\\n database-implementations\\n date-and-time\\n development-tools\\n email\\n embedded\\n emulators\\n encoding\\n external-ffi-bindings\\n filesystem\\n finance\\n game-development\\n game-engines\\n games\\n graphics\\n gui\\n hardware-support\\n internationalization\\n localization\\n mathematics\\n memory-management\\n multimedia\\n network-programming\\n no-std\\n os\\n parser-implementations\\n parsing\\n rendering\\n rust-patterns\\n science\\n simulation\\n template-engine\\n text-editors\\n text-processing\\n value-formatting\\n virtualization\\n visualization\\n wasm\\n web-programming\",\"required\":true,\"type\":\"array_of_strings\"},\"package_description\":{\"generation_instructions\":\"We will place this package_description in our Cargo.toml file so the users of this crate\\n know what it does.\\n\\n The discription should be technical, clear, and useful. It should be terse.\",\"required\":true,\"type\":\"string\"},\"package_keywords\":{\"generation_instructions\":\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\",\"required\":true,\"type\":\"array_of_strings\"}},\"struct_docs\":\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\",\"struct_name\":\"AiReadmeWriterDesiredOutput\"}\nRephrase Entries:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind.\n- Do not use modern cultural references or generically reference ideas which do not fit the overall aura of our setting.\n\nPresent the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \nWe would like to be able to parse your response directly as JSON.\n\n","role":"system"},{"content":"We have a rust crate named 'language-model-type' 0.1.0. \n\nHere is the interface:\n/// Supported model types.\n#[derive(Copy,Clone,Debug, Serialize, Deserialize)]\n#[serde(rename_all = \"lowercase\")]\npub enum LanguageModelType {\n    Gpt3_5Turbo,\n    Gpt4o,\n    Gpt4oMini,\n    Gpt4Turbo,\n    O1Preview,\n    O1Mini,\n    O1,\n}\n\nimpl std::fmt::Display for LanguageModelType {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        match self {\n            LanguageModelType::Gpt3_5Turbo => write!(f, \"gpt-3.5-turbo\"),\n            LanguageModelType::Gpt4o       => write!(f, \"gpt-4o\"),\n            LanguageModelType::Gpt4oMini   => write!(f, \"gpt-4o-mini\"),\n            LanguageModelType::Gpt4Turbo   => write!(f, \"gpt-4-turbo\"),\n            LanguageModelType::O1Preview   => write!(f, \"o1-preview\"),\n            LanguageModelType::O1Mini      => write!(f, \"o1-mini\"),\n            LanguageModelType::O1          => write!(f, \"o1\"),\n        }\n    }\n}\n\nThis crate has the following authors:\n[\n    \"klebs tpk3.mx@gmail.com\",\n]\nThis crate has the following rust edition:\n2024\nThis crate has the following license:\nMIT\nThis crate is held in the following repository:\nhttps://github.com/klebs6/klebs-general\n","role":"user"}],"model":"gpt-4o"}}
{"custom_id":"request-2","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- In terms of the JSON format we would like you to provide, all schema items should live at the top level of the json object. \n  The object itself will be deserialied based on the schema. \n  The fields should not be nested under a parent named 'fields' or anything similar.\n\nHere is the schema to Use:\n\n{\"fields\":{\"crate_name\":{\"generation_instructions\":\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\",\"required\":true,\"type\":\"string\"},\"full_readme_markdown\":{\"generation_instructions\":\"This string should be valid markdown representing the readme for this crate.\\n\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\n\\n Advanced vocabulary and concepts are welcome. \\n\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\",\"required\":true,\"type\":\"string\"},\"package_categories\":{\"generation_instructions\":\"These categories will be used in our Cargo.toml file.\\n\\n It is important that users of this crate can find it on crates.io.\\n\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\n\\n These categories should only be chosen from among the legal crates.io categories. \\n\\n The legal categoreis are:\\n\\n accessibility\\n aerospace\\n algorithms\\n api-bindings\\n asynchronous\\n authentication\\n caching\\n command-line-interface\\n command-line-utilities\\n compilers\\n compression\\n computer-vision\\n concurrency\\n config\\n cryptography\\n data-structures\\n database\\n database-implementations\\n date-and-time\\n development-tools\\n email\\n embedded\\n emulators\\n encoding\\n external-ffi-bindings\\n filesystem\\n finance\\n game-development\\n game-engines\\n games\\n graphics\\n gui\\n hardware-support\\n internationalization\\n localization\\n mathematics\\n memory-management\\n multimedia\\n network-programming\\n no-std\\n os\\n parser-implementations\\n parsing\\n rendering\\n rust-patterns\\n science\\n simulation\\n template-engine\\n text-editors\\n text-processing\\n value-formatting\\n virtualization\\n visualization\\n wasm\\n web-programming\",\"required\":true,\"type\":\"array_of_strings\"},\"package_description\":{\"generation_instructions\":\"We will place this package_description in our Cargo.toml file so the users of this crate\\n know what it does.\\n\\n The discription should be technical, clear, and useful. It should be terse.\",\"required\":true,\"type\":\"string\"},\"package_keywords\":{\"generation_instructions\":\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\",\"required\":true,\"type\":\"array_of_strings\"}},\"struct_docs\":\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\",\"struct_name\":\"AiReadmeWriterDesiredOutput\"}\nRephrase Entries:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind.\n- Do not use modern cultural references or generically reference ideas which do not fit the overall aura of our setting.\n\nPresent the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \nWe would like to be able to parse your response directly as JSON.\n\n","role":"system"},{"content":"We have a rust crate named 'agent-coordinate' 0.1.0. \n\nHere is the interface:\n#[derive(Clone, Debug, Getters, Builder)]\n#[builder(setter(into, strip_option), default)]\n#[getset(get = \"pub\")]\npub struct AgentCoordinate {\n    location: Option<String>,\n    goal: Option<String>,\n}\n\nimpl Default for AgentCoordinate {\n    fn default() -> Self {\n        info!(\"Creating default AgentCoordinate (nowhere_with_no_goal).\");\n        Self::nowhere_with_no_goal()\n    }\n}\n\nimpl AgentCoordinate {\n    pub fn here_without_a_goal(location: &str) -> Self {\n        info!(\"Creating AgentCoordinate with location='{location}' and no goal.\");\n        Self {\n            location: Some(location.to_string()),\n            goal:     None,\n        }\n    }\n    pub fn here_with_a_goal(location: &str, goal: &str) -> Self {\n        info!(\"Creating AgentCoordinate with location='{location}' and goal='{goal}'.\");\n        Self {\n            location: Some(location.to_string()),\n            goal:     Some(goal.to_string()),\n        }\n    }\n    pub fn nowhere_with_no_goal() -> Self {\n        info!(\"Creating AgentCoordinate with no location and no goal.\");\n        Self {\n            location: None,\n            goal:     None,\n        }\n    }\n    pub fn nowhere_with_a_goal(goal: &str) -> Self {\n        info!(\"Creating AgentCoordinate with no location and goal='{goal}'.\");\n        Self {\n            location: None,\n            goal:     Some(goal.to_string()),\n        }\n    }\n    pub fn has_location(&self) -> bool {\n        let has_loc = self.location.is_some();\n        debug!(\"Checking if AgentCoordinate has a location: {has_loc}\");\n        has_loc\n    }\n    pub fn has_goal(&self) -> bool {\n        let has_g = self.goal.is_some();\n        debug!(\"Checking if AgentCoordinate has a goal: {has_g}\");\n        has_g\n    }\n    pub fn is_fully_specified(&self) -> bool {\n        let fully = self.has_location() && self.has_goal();\n        trace!(\"Checking if AgentCoordinate is fully specified: {fully}\");\n        fully\n    }\n    pub fn set_location(&mut self, loc: Option<&str>) {\n        if self.location.is_some() {\n            warn!(\"Overwriting existing location with '{loc:?}'\");\n        }\n        self.location = loc.map(|x| x.to_string());\n    }\n    pub fn set_goal(&mut self, g: Option<&str>) {\n        if self.goal.is_some() {\n            warn!(\"Overwriting existing goal with '{g:?}'\");\n        }\n        self.goal = g.map(|x| x.to_string());\n    }\n}\n\nimpl std::fmt::Display for AgentCoordinate {\n    fn fmt(&self, out: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        debug!(\"Formatting AgentCoordinate for display.\");\n    \n        if self.location.is_none() && self.goal.is_none() {\n            debug!(\"No location and no goal specified.\");\n            return write!(\n                out,\n                \"Neither your goal nor your location are specified by the user.\"\n            );\n        }\n    \n        let mut x = String::new();\n    \n        if let Some(place) = &self.location {\n            debug!(\"Appending location='{place}' to display output.\");\n            x.push_str(&format!(\"You are here: {place}. \"));\n        }\n    \n        if let Some(g) = &self.goal {\n            debug!(\"Appending goal='{g}' to display output.\");\n            x.push_str(&format!(\"Goal: {g}.\"));\n        }\n    \n        write!(out, \"{x}\")\n    }\n}\n\nThis crate has the following rust edition:\n2024\n","role":"user"}],"model":"gpt-4o"}}
{"custom_id":"request-3","method":"POST","url":"/v1/chat/completions","body":{"max_completion_tokens":8192,"messages":[{"content":"We would like you to write a README.md for a rust crate with maximally helpful content.\nAdditionally, we would like you to generate several fields from the Cargo.toml package section for this crate.\nWe will show you the strict json output format we would like you to provide.\nPlease tailor your response for an apex consumer of maximal intelligence.\nA reader of this README.md should have a good sense of what the crate does and how to use it after reading what you write.\nPlease include a messaage indicating that this README.md file was generated by an AI model and may not be 100% accurate however it should be pretty good.\n\n\nCarefully read and parse the information we sent you.\nWe want to generate all information items requested by our schema:\n\n- Read the description of each field. Use it, along with the content we sent you to generate an appropriate value for each.\n- Ensure that each generated field optimally serves its desired purpose.\n- Each item should be deep, detailed, and specific. Use optimally descriptive and useful language. Do not be too verbose.\n- In terms of the JSON format we would like you to provide, all schema items should live at the top level of the json object. \n  The object itself will be deserialied based on the schema. \n  The fields should not be nested under a parent named 'fields' or anything similar.\n\nHere is the schema to Use:\n\n{\"fields\":{\"crate_name\":{\"generation_instructions\":\"This string should be the name of our crate, *verbatim*, trimmed for use as a toml field\",\"required\":true,\"type\":\"string\"},\"full_readme_markdown\":{\"generation_instructions\":\"This string should be valid markdown representing the readme for this crate.\\n\\n Please make it terse, useful, and designed for an industrious commercially savy consumer of industrious nature. \\n\\n Advanced vocabulary and concepts are welcome. \\n\\n If this crate involves concepts from mathematics and/or physics, please describe and document them here.\",\"required\":true,\"type\":\"string\"},\"package_categories\":{\"generation_instructions\":\"These categories will be used in our Cargo.toml file.\\n\\n It is important that users of this crate can find it on crates.io.\\n\\n Choose maximum 5 categories and make sure they are actually meaningful for our crate.\\n\\n These categories should only be chosen from among the legal crates.io categories. \\n\\n The legal categoreis are:\\n\\n accessibility\\n aerospace\\n algorithms\\n api-bindings\\n asynchronous\\n authentication\\n caching\\n command-line-interface\\n command-line-utilities\\n compilers\\n compression\\n computer-vision\\n concurrency\\n config\\n cryptography\\n data-structures\\n database\\n database-implementations\\n date-and-time\\n development-tools\\n email\\n embedded\\n emulators\\n encoding\\n external-ffi-bindings\\n filesystem\\n finance\\n game-development\\n game-engines\\n games\\n graphics\\n gui\\n hardware-support\\n internationalization\\n localization\\n mathematics\\n memory-management\\n multimedia\\n network-programming\\n no-std\\n os\\n parser-implementations\\n parsing\\n rendering\\n rust-patterns\\n science\\n simulation\\n template-engine\\n text-editors\\n text-processing\\n value-formatting\\n virtualization\\n visualization\\n wasm\\n web-programming\",\"required\":true,\"type\":\"array_of_strings\"},\"package_description\":{\"generation_instructions\":\"We will place this package_description in our Cargo.toml file so the users of this crate\\n know what it does.\\n\\n The discription should be technical, clear, and useful. It should be terse.\",\"required\":true,\"type\":\"string\"},\"package_keywords\":{\"generation_instructions\":\"These keywords will be used in our Cargo.toml file so the users of this crate can easily\\n find it in the package system. Keywords should be useful, varied, meaningful, and reflect\\n the contents of our crate. They should make it easy to find. Please provide exactly five.\",\"required\":true,\"type\":\"array_of_strings\"}},\"struct_docs\":\" This structure is a directive indicating which fields we need you to provide for us in your response to our query.\\n\",\"struct_name\":\"AiReadmeWriterDesiredOutput\"}\nRephrase Entries:\n\n- Ensure entries are concise and focused.\n- Ensure there are no vague phrases (e.g., avoid starting with \"Illustrates the something something...\"; instead, use direct details like \"The hanging green vines on the garden wall\").\n\nEnsure Clarity and Consistency:\n\n- Use clear, grammatically correct sentences.\n- Maintain a consistent tone and style throughout.\n\nEnrich Content:\n\n- Communicate additional information where appropriate to enhance depth and value.\n- If a mathematical, physical, or otherwise technical background is helpful, please provide it.\n- Ensure that the content is comprehensive and meets all requirements.\nFocus Language:\n\n- Use deliberate and precise language.\n- Avoid vague verbs and keep the maximally intelligent and detail oriented audience in mind.\n- Do not use modern cultural references or generically reference ideas which do not fit the overall aura of our setting.\n\nPresent the Final JSON:\n\n- Format the output as a JSON object.\n- Include all fields properly named from the schema we sent you.\n\nEnsure Proper Formatting:\n\n- Use proper JSON syntax with keys and arrays.\n- Ensure that all entries are correctly placed in their respective places.\n\nYour output should only consist of the JSON object. do *not* include a preamble or postamble to your response. \nWe would like to be able to parse your response directly as JSON.\n\n","role":"system"},{"content":"We have a rust crate named 'instructed-language-model-at-coordinate' 0.1.0. \n\nHere is the interface:\n#[derive(Debug,Clone,PartialEq,Eq)]\npub enum LanguageModelOutputFormatInstruction {\n    AvoidVagueness,\n    ProvideOutputAsValidJson,\n}\n\npub trait GetSystemMessageAtAgentCoordinate {\n    fn get_system_message_at_agent_coordinate(&self, coord: &AgentCoordinate) -> String;\n}\n\n\npub trait CreateLanguageModelQueryAtAgentCoordinate {\n    fn create_language_model_query_at_agent_coordinate<X:IntoLanguageModelQueryString>(&self, model: &LanguageModelType, coord: &AgentCoordinate, input: &X) -> String;\n}\n\n#[derive(Clone,Builder,Getters,Debug)]\n#[builder(setter(into))]\n#[getset(get=\"pub\")]\npub struct InstructedLanguageModelAtCoordinate {\n    agent_coordinate: Option<AgentCoordinate>,\n    instructions: Vec<LanguageModelOutputFormatInstruction>,\n}\n\nimpl LanguageModelOutputFormatInstruction {\n    pub fn provide(&self) -> Vec<&'static str> {\n        match self {\n            LanguageModelOutputFormatInstruction::AvoidVagueness => vec![\n                \"Steer clear of vague sweeping generalizations. Instead focus on concrete, direct, specific details and descriptive language.\",\n                \"Don't ever use the term `narrative` or anything similarly vague. Please steer clear of all vague concepts\",\n            ],\n            LanguageModelOutputFormatInstruction::ProvideOutputAsValidJson => vec![\n                \"Please provide the output as a valid JSON object. Do not include any explanations, code block markers, or additional text. The JSON should start with `{` and end with `}`.\",\n                \"The JSON data should be free of typos like naked double quotes within strings and extra or missing punctuation marks\",\n            ],\n        }\n    }\n}\n\nimpl InstructedLanguageModelAtCoordinate {\n    pub fn emit_detailed_json_objects(coord: &AgentCoordinate) -> Self {\n        Self {\n            agent_coordinate: Some(coord.clone()),\n            instructions:     language_model_output_format_instructions::generate_detailed_json_objects(),\n        }\n    }\n}\n\nimpl From<&InstructedLanguageModelAtCoordinate> for SystemMessageHeader {\n    fn from(llm: &InstructedLanguageModelAtCoordinate) -> Self {\n    \n        let mut system_message_header = match llm.agent_coordinate() {\n            Some(coord) => format!(\"{}\",coord),\n            None        => format!(\"\"),\n        };\n    \n        system_message_header.push_str(\"Notes:\\n\\n\");\n    \n        for note in llm.instructions().iter() {\n            for message in note.provide() {\n                system_message_header.push_str(&format!(\"{}\\n\\n\", message));\n            }\n        }\n    \n        SystemMessageHeader::new(&system_message_header)\n    }\n}\n\nimpl<T: TokenExpander> GetSystemMessageAtAgentCoordinate for T {\n    fn get_system_message_at_agent_coordinate(&self, coord: &AgentCoordinate) -> String {\n    \n        let llm   = InstructedLanguageModelAtCoordinate::emit_detailed_json_objects(coord);\n        let steps = TokenExpansionStep::vec_from_axes(&self.axes());\n    \n        let message_header = SystemMessageHeader::from(&llm);\n    \n        const GLOBAL_INSTRUCTIONS: &'static str \n            = \"Convert the provided token into a JSON representation, restructured according to the specified axes. \n            Follow these steps meticulously to ensure consistency and completeness:\";\n    \n        let mut system_message = format!{\n            \"{}\\n\\nInstructions:\\n\\n{}\\n\\n\", \n            message_header, \n            GLOBAL_INSTRUCTIONS\n        };\n    \n        for (i, step) in steps.iter().enumerate() {\n            system_message.push_str(&format!(\"Step {}: {}\\n\\n{}\", i + 1, step.name(), step.ai_instructions()));\n        }\n    \n        system_message\n    }\n}\n\nimpl<T:GetSystemMessageAtAgentCoordinate> CreateLanguageModelQueryAtAgentCoordinate for T {\n    fn create_language_model_query_at_agent_coordinate<X:IntoLanguageModelQueryString>(&self, model: &LanguageModelType, coord: &AgentCoordinate, input: &X) -> String {\n    \n        let system_message = self.get_system_message_at_agent_coordinate(coord);\n        let query_string   = input.into_language_model_query_string();\n    \n        formatdoc!{\n            \"\n            {system_message}\n            {query_string}\n            \"\n        }\n    }\n}\n\nThis crate has the following rust edition:\n2024\n","role":"user"}],"model":"gpt-4o"}}
