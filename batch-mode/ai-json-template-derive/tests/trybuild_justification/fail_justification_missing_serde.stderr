error: cannot find derive macro `Builder` in this scope
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the derive macro `AiJsonTemplateWithJustification` (in Nightly builds, run with -Z macro-backtrace for more info)
help: consider importing this derive macro
   |
9  + use derive_builder::Builder;
   |

error: cannot find attribute `builder` in this scope
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: this error originates in the derive macro `AiJsonTemplateWithJustification` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `for<'a> MissingSerdeField: _::_serde::Deserialize<'a>` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `for<'a> _::_serde::Deserialize<'a>` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `ai_json_template::AiJsonTemplate`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplate
   |           -------------- required by a bound in this trait
...
   | + for<'a> Deserialize<'a>
   |   ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplate`

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Serialize` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `_::_serde::Serialize` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
note: required by a bound in `ai_json_template::AiJsonTemplate`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplate
   |           -------------- required by a bound in this trait
...
   | + Serialize
   |   ^^^^^^^^^ required by this bound in `AiJsonTemplate`

error[E0277]: the trait bound `MissingSerdeField: SaveToFile` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `SaveToFile` is not implemented for `MissingSerdeField`
   |
   = help: the trait `SaveToFile` is implemented for `Vec<std::string::String>`
note: required by a bound in `ai_json_template::AiJsonTemplate`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplate
   |           -------------- required by a bound in this trait
...
   | + SaveToFile<Error=SaveLoadError>
   |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplate`

error[E0277]: the trait bound `MissingSerdeField: LoadFromFile` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `LoadFromFile` is not implemented for `MissingSerdeField`
   |
   = help: the trait `LoadFromFile` is implemented for `Vec<std::string::String>`
note: required by a bound in `ai_json_template::AiJsonTemplate`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplate
   |           -------------- required by a bound in this trait
...
   | + LoadFromFile
   |   ^^^^^^^^^^^^ required by this bound in `AiJsonTemplate`

error[E0277]: the trait bound `for<'a> MissingSerdeField: _::_serde::Deserialize<'a>` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `for<'a> _::_serde::Deserialize<'a>` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
   = note: required for `MissingSerdeField` to implement `ai_json_template::AiJsonTemplate`
note: required by a bound in `ai_json_template::AiJsonTemplateWithJustification`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplateWithJustification: AiJsonTemplate {
   |                                            ^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplateWithJustification`

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Serialize` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `_::_serde::Serialize` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
   = note: required for `MissingSerdeField` to implement `ai_json_template::AiJsonTemplate`
note: required by a bound in `ai_json_template::AiJsonTemplateWithJustification`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplateWithJustification: AiJsonTemplate {
   |                                            ^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplateWithJustification`

error[E0277]: the trait bound `MissingSerdeField: SaveToFile` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `SaveToFile` is not implemented for `MissingSerdeField`
   |
   = help: the trait `SaveToFile` is implemented for `Vec<std::string::String>`
   = note: required for `MissingSerdeField` to implement `ai_json_template::AiJsonTemplate`
note: required by a bound in `ai_json_template::AiJsonTemplateWithJustification`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplateWithJustification: AiJsonTemplate {
   |                                            ^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplateWithJustification`

error[E0277]: the trait bound `MissingSerdeField: LoadFromFile` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `LoadFromFile` is not implemented for `MissingSerdeField`
   |
   = help: the trait `LoadFromFile` is implemented for `Vec<std::string::String>`
   = note: required for `MissingSerdeField` to implement `ai_json_template::AiJsonTemplate`
note: required by a bound in `ai_json_template::AiJsonTemplateWithJustification`
  --> $WORKSPACE/ai-json-template/src/ai_json_template.rs
   |
   | pub trait AiJsonTemplateWithJustification: AiJsonTemplate {
   |                                            ^^^^^^^^^^^^^^ required by this bound in `AiJsonTemplateWithJustification`

error[E0277]: the trait bound `MissingSerdeField: Default` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `MissingSerdeField`
   |
help: consider annotating `MissingSerdeField` with `#[derive(Default)]`
   |
19 + #[derive(Default)]
20 | struct MissingSerdeField {
   |

error[E0369]: binary operation `==` cannot be applied to type `MissingSerdeField`
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: an implementation of `PartialEq` might be missing for `MissingSerdeField`
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:1
   |
19 | struct MissingSerdeField {
   | ^^^^^^^^^^^^^^^^^^^^^^^^ must implement `PartialEq`
help: consider annotating `MissingSerdeField` with `#[derive(PartialEq)]`
   |
19 + #[derive(PartialEq)]
20 | struct MissingSerdeField {
   |

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Serialize` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `_::_serde::Serialize` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Serialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Serialize`:
             &'a T
             &'a mut T
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
             (T0, T1, T2, T3, T4)
           and $N others
note: required by a bound in `_::_serde::ser::SerializeStruct::serialize_field`
  --> $CARGO/serde-1.0.219/src/ser/mod.rs
   |
   |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
   |        --------------- required by a bound in this associated function
   |     where
   |         T: ?Sized + Serialize;
   |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
   = note: this error originates in the derive macro `AiJsonTemplateWithJustification` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Deserialize<'_>` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `_::_serde::Deserialize<'_>` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `next_element`
  --> $CARGO/serde-1.0.219/src/de/mod.rs
   |
   |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
   |        ------------ required by a bound in this associated function
   |     where
   |         T: Deserialize<'de>,
   |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Deserialize<'_>` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:19:8
   |
19 | struct MissingSerdeField {
   |        ^^^^^^^^^^^^^^^^^ the trait `_::_serde::Deserialize<'_>` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `next_value`
  --> $CARGO/serde-1.0.219/src/de/mod.rs
   |
   |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
   |        ---------- required by a bound in this associated function
   |     where
   |         V: Deserialize<'de>,
   |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `MissingSerdeField: _::_serde::Deserialize<'_>` is not satisfied
  --> tests/trybuild_justification/fail_justification_missing_serde.rs:17:26
   |
17 | #[derive(AiJsonTemplate, AiJsonTemplateWithJustification)]
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `_::_serde::Deserialize<'_>` is not implemented for `MissingSerdeField`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `MissingSerdeField` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `_::_serde::Deserialize<'de>`:
             &'a Path
             &'a [u8]
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
             (T0, T1, T2, T3)
           and $N others
note: required by a bound in `_::_serde::__private::de::missing_field`
  --> $CARGO/serde-1.0.219/src/private/de.rs
   |
   | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
   | where
   |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `AiJsonTemplateWithJustification` (in Nightly builds, run with -Z macro-backtrace for more info)
